{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pkglite for Python","text":"<p>A simple framework for packing source projects of any language into portable text files and restoring them into the original directory structure.</p> <p>Besides the Python API, a command line interface is also provided.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install pkglite for Python from PyPI:</p> <pre><code>pip install pkglite\n</code></pre> <p>Or install the development version from GitHub:</p> <pre><code>git clone https://github.com/pharmaverse/py-pkglite.git\ncd py-pkglite\npython3 -m pip install -e .\n</code></pre> <p>To install the command line tool globally, use pipx.</p>"},{"location":"#usage","title":"Usage","text":"<p>Check out the getting started article for the CLI and Python API usage.</p> <p>See the design article about the rationale for this package.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#py-pkglite-018","title":"py-pkglite 0.1.8","text":""},{"location":"changelog/#linting","title":"Linting","text":"<ul> <li>Added ruff linter configuration to <code>pyproject.toml</code> with popular rule sets   including pycodestyle, Pyflakes, pyupgrade, flake8-bugbear, flake8-simplify,   and isort (#50).</li> <li>Fixed <code>ruff check</code> linting issues including UP006, UP015, UP035, F401, E501,   B007, B904, and SIM102 (#50).</li> </ul>"},{"location":"changelog/#py-pkglite-017","title":"py-pkglite 0.1.7","text":""},{"location":"changelog/#maintenance","title":"Maintenance","text":"<ul> <li>Added Python 3.14 support and set as default development environment (#47).</li> <li>Updated GitHub Actions workflows to use the latest <code>checkout</code> and   <code>setup-python</code> versions (#47).</li> <li>Refactored the logo generation script to use ImageMagick, removing the   previous R and hexSticker dependency (#46).</li> </ul>"},{"location":"changelog/#py-pkglite-016","title":"py-pkglite 0.1.6","text":""},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Switched all articles to native Markdown and simplified the docs sync process;   removed <code>nbconvert</code> and <code>jupyter</code> from dev dependencies (#41).</li> <li>Added mypy and pharmaverse badges to the README (#39, #43).</li> </ul>"},{"location":"changelog/#py-pkglite-015","title":"py-pkglite 0.1.5","text":""},{"location":"changelog/#typing","title":"Typing","text":"<ul> <li>Add mypy as a development dependency and resolve all mypy type checking issues (#34).</li> </ul>"},{"location":"changelog/#maintenance_1","title":"Maintenance","text":"<ul> <li>Add a GitHub Actions workflow to run mypy checks (#35).</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Shorten and improve clarity of the package description (#36).</li> </ul>"},{"location":"changelog/#py-pkglite-014","title":"py-pkglite 0.1.4","text":""},{"location":"changelog/#maintenance_2","title":"Maintenance","text":"<ul> <li>Removed download statistics badge from <code>README.md</code> due to availability issues   with the service (#28).</li> <li>Update documentation code font to improve readability (#29, #30).</li> <li>Use Python 3.13.7 for the default package development environment (#31).</li> </ul>"},{"location":"changelog/#py-pkglite-013","title":"py-pkglite 0.1.3","text":""},{"location":"changelog/#maintenance_3","title":"Maintenance","text":"<ul> <li>Manage project with uv (#24).</li> </ul>"},{"location":"changelog/#py-pkglite-012","title":"py-pkglite 0.1.2","text":""},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>Use absolute URL to replace relative path for the logo image in <code>README.md</code>,   to make it render properly on PyPI (#20).</li> <li>Improve logo and favicon images generation workflow for better font rendering (#22).</li> </ul>"},{"location":"changelog/#py-pkglite-011","title":"py-pkglite 0.1.1","text":""},{"location":"changelog/#improvements","title":"Improvements","text":"<ul> <li>Rewrite packed file parser with finite state machines to improve code readability (#16).</li> <li>Use isort to sort import statements for all Python files (#15).</li> </ul>"},{"location":"changelog/#py-pkglite-010","title":"py-pkglite 0.1.0","text":""},{"location":"changelog/#typing_1","title":"Typing","text":"<ul> <li>Refactor type hints to use built-in generics and base abstract classes   following typing best practices (#11).</li> <li>Use PEP 604 style shorthand syntax for union and optional types (#10).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Use pathspec to handle ignore pattern matching. This makes the packing   feature work properly under Windows (#7).</li> </ul>"},{"location":"changelog/#improvements_1","title":"Improvements","text":"<ul> <li>Read and write text files using UTF-8 encoding on all platforms (#7).</li> </ul>"},{"location":"articles/design/","title":"Why pkglite for Python?","text":""},{"location":"articles/design/#differentiators","title":"Differentiators","text":"<p>Building on our experience developing pkglite for R, we resolved several longstanding, unmet needs with pkglite for Python:</p> <ul> <li>Broader scope. Extend support for packing and unpacking packages   across any programming language, without R-specific assumptions.</li> <li>Optimized tooling. Simplify packing logic by classifying files   based on content rather than file extensions.   UTF-8 in and UTF-8 out for all text files on all platforms.</li> <li>Engineering-friendly interface. Besides the language-specific API,   provide a command-line interface (CLI) to better integrate with   standard engineering workflows.</li> </ul>"},{"location":"articles/design/#design-choices","title":"Design choices","text":"<p>We made a few key design changes from pkglite for R to implement the above goals:</p> <ul> <li>Introduced a <code>.pkgliteignore</code> configuration file to control packing scope,   following the gitignore standard.</li> <li>Adopted content-based file type classification for unsupervised file discovery.</li> <li>Built with Python for better flexibility and accessibility.</li> </ul>"},{"location":"articles/get-started/","title":"Get started","text":""},{"location":"articles/get-started/#python-api","title":"Python API","text":"<p>Import pkglite:</p> <pre><code>import pkglite as pkg\n</code></pre>"},{"location":"articles/get-started/#single-directory","title":"Single directory","text":"<p>Pack a single directory into a text file and unpack it:</p> <pre><code>dirs = [\"path/to/pkg\"]\ntxt = \"path/to/pkg.txt\"\npkg.use_pkglite(dirs)\npkg.pack(dirs, output_file=txt)\npkg.unpack(txt, output_dir=\"path/to/output\")\n</code></pre>"},{"location":"articles/get-started/#multiple-directories","title":"Multiple directories","text":"<p>Pack multiple directories into a text file and unpack it:</p> <pre><code>dirs = [\"path/to/pkg1\", \"path/to/pkg2\"]\ntxt = \"path/to/pkgs.txt\"\npkg.use_pkglite(dirs)\npkg.pack(dirs, output_file=txt)\npkg.unpack(txt, output_dir=\"path/to/output\")\n</code></pre> <p>The <code>use_pkglite()</code> function creates a <code>.pkgliteignore</code> file to exclude files from the packing scope.</p>"},{"location":"articles/get-started/#command-line-interface","title":"Command line interface","text":""},{"location":"articles/get-started/#single-directory_1","title":"Single directory","text":"<p>Pack a single directory into a text file and unpack it:</p> <pre><code>pkglite use path/to/pkg\npkglite pack path/to/pkg -o path/to/pkg.txt\npkglite unpack path/to/pkg.txt -o path/to/output\n</code></pre>"},{"location":"articles/get-started/#multiple-directories_1","title":"Multiple directories","text":"<p>Pack multiple directories into a text file and unpack it:</p> <pre><code>pkglite use path/to/pkg1 path/to/pkg2\npkglite pack path/to/pkg1 path/to/pkg2 -o path/to/pkgs.txt\npkglite unpack path/to/pkgs.txt -o path/to/output\n</code></pre> <p>The <code>pkglite use</code> subcommand creates a <code>.pkgliteignore</code> file to exclude files from the packing scope.</p> <p>Run</p> <pre><code>pkglite --help\npkglite use --help\npkglite pack --help\npkglite unpack --help\n</code></pre> <p>for more information about the available subcommands and their options.</p>"},{"location":"reference/classify/","title":"Classify","text":""},{"location":"reference/classify/#pkglite.classify","title":"<code>pkglite.classify</code>","text":""},{"location":"reference/classify/#pkglite.classify.is_text_file","title":"<code>is_text_file(path, n=None)</code>","text":"<p>Classify any file as text or binary.</p> <p>Algorithm adopted from \"A Fast Method for Identifying Plain Text Files\" in zlib (<code>doc/txtvsbin.txt</code>).</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>File path.</p> required <code>n</code> <code>int | None</code> <p>Maximal number of bytes to read. Defaults to file size.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the file is text, False if binary.</p>"},{"location":"reference/classify/#pkglite.classify.classify_file","title":"<code>classify_file(path)</code>","text":"<p>Classify file as text or binary.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the file to classify.</p> required <p>Returns:</p> Type Description <code>str</code> <p><code>'text'</code> if the file is detected as text, <code>'binary'</code> otherwise.</p>"},{"location":"reference/pack/","title":"Pack","text":""},{"location":"reference/pack/#pkglite.pack","title":"<code>pkglite.pack</code>","text":""},{"location":"reference/pack/#pkglite.pack.pack","title":"<code>pack(input_dirs, output_file=Path('pkglite.txt'), quiet=False)</code>","text":"<p>Pack files from one or multiple directories into a text file.</p> <p>Parameters:</p> Name Type Description Default <code>input_dirs</code> <code>str | Path | Sequence[str | Path]</code> <p>Path or sequence of paths to the directories to pack.</p> required <code>output_file</code> <code>str | Path</code> <p>Path to the output file. Default is 'pkglite.txt'.</p> <code>Path('pkglite.txt')</code> <code>quiet</code> <code>bool</code> <p>If True, suppress output messages.</p> <code>False</code>"},{"location":"reference/unpack/","title":"Unpack","text":""},{"location":"reference/unpack/#pkglite.unpack","title":"<code>pkglite.unpack</code>","text":""},{"location":"reference/unpack/#pkglite.unpack.unpack","title":"<code>unpack(input_file, output_dir='.', quiet=False)</code>","text":"<p>Unpack files from a text file into the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>input_file</code> <code>str | Path</code> <p>Path to the packed file.</p> required <code>output_dir</code> <code>str | Path</code> <p>Path to the directory to unpack files into.</p> <code>'.'</code> <code>quiet</code> <code>bool</code> <p>If True, suppress output messages.</p> <code>False</code>"},{"location":"reference/use/","title":"Use","text":""},{"location":"reference/use/#pkglite.use","title":"<code>pkglite.use</code>","text":""},{"location":"reference/use/#pkglite.use.use_pkglite","title":"<code>use_pkglite(input_dirs, force=False, quiet=False)</code>","text":"<p>Copy the <code>.pkgliteignore</code> template into one or more directories.</p> <p>Parameters:</p> Name Type Description Default <code>input_dirs</code> <code>str | Path | Sequence[str | Path]</code> <p>Path or sequence of paths to directories for <code>.pkgliteignore</code>.</p> required <code>force</code> <code>bool</code> <p>If True, overwrite existing <code>.pkgliteignore</code> files.</p> <code>False</code> <code>quiet</code> <code>bool</code> <p>If True, suppress output messages.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>Paths to the newly created or existing <code>.pkgliteignore</code> files.</p>"}]}